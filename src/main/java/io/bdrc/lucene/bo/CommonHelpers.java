package io.bdrc.lucene.bo;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommonHelpers {
    static final Logger logger = LoggerFactory.getLogger(CommonHelpers.class);
    public static final String baseDir = "src/main/resources/";

    public static InputStream getResourceOrFile(final String baseName) {
        InputStream stream = null;
        stream = CommonHelpers.class.getClassLoader().getResourceAsStream("/" + baseName);
        if (stream != null) {
            logger.info("found resource /{} through regular classloader", baseName);
            return stream;
        }
        stream = Thread.currentThread().getContextClassLoader().getResourceAsStream("/" + baseName);
        if (stream != null) {
            logger.info("found resource /{} through thread context classloader", baseName);
            return stream;
        }
        stream = CommonHelpers.class.getResourceAsStream(baseName);
        if (stream != null) {
            logger.info("found resource /{} through direct classloader", baseName);
            return stream;
        }
        final String fileBaseName = baseDir + baseName;
        try {
            stream = new FileInputStream(fileBaseName);
            logger.info("found file {}", fileBaseName);
            return stream;
        } catch (FileNotFoundException e) {
            logger.info("could not find file {}", fileBaseName);
            return null;
        }
    }
    
    public static final VeryBasicTrie onsetTrie = new VeryBasicTrie();
    public static final VeryBasicTrie vowelCodaTrie = new VeryBasicTrie();
    
    static {
        initializeTrees();
    }
    
    public static void initializeTrees() {
        onsetTrie.add("ཀ");
        onsetTrie.add("ཀྱ");
        onsetTrie.add("ཀྲ");
        onsetTrie.add("ཀླ");
        onsetTrie.add("དཀ");
        onsetTrie.add("དཀྱ");
        onsetTrie.add("དཀྲ");
        onsetTrie.add("བཀ");
        onsetTrie.add("བཀྱ");
        onsetTrie.add("བཀྲ");
        onsetTrie.add("བཀླ");
        onsetTrie.add("རྐ");
        onsetTrie.add("རྐྱ");
        onsetTrie.add("ལྐ");
        onsetTrie.add("སྐ");
        onsetTrie.add("སྐྱ");
        onsetTrie.add("སྐྲ");
        onsetTrie.add("བརྐ");
        onsetTrie.add("བརྐྱ");
        onsetTrie.add("བསྐ");
        onsetTrie.add("བསྐྱ");
        onsetTrie.add("བསྐྲ");
        onsetTrie.add("ཁ");
        onsetTrie.add("ཁྱ");
        onsetTrie.add("ཁྲ");
        onsetTrie.add("མཁ");
        onsetTrie.add("མཁྱ");
        onsetTrie.add("མཁྲ");
        onsetTrie.add("འཁ");
        onsetTrie.add("འཁྱ");
        onsetTrie.add("འཁྲ");
        onsetTrie.add("ག");
        onsetTrie.add("གྱ");
        onsetTrie.add("གྲ");
        onsetTrie.add("གླ");
        onsetTrie.add("དག");
        onsetTrie.add("དགྱ");
        onsetTrie.add("དགྲ");
        onsetTrie.add("བག");
        onsetTrie.add("བགྱ");
        onsetTrie.add("བགྲ");
        onsetTrie.add("མག");
        onsetTrie.add("མགྱ");
        onsetTrie.add("མགྲ");
        onsetTrie.add("འག");
        onsetTrie.add("འགྱ");
        onsetTrie.add("འགྲ");
        onsetTrie.add("རྒ");
        onsetTrie.add("རྒྱ");
        onsetTrie.add("ལྒ");
        onsetTrie.add("སྒ");
        onsetTrie.add("སྒྱ");
        onsetTrie.add("སྒྲ");
        onsetTrie.add("བརྒ");
        onsetTrie.add("བརྒྱ");
        onsetTrie.add("བསྒ");
        onsetTrie.add("བསྒྱ");
        onsetTrie.add("བསྒྲ");
        onsetTrie.add("ང");
        onsetTrie.add("དང");
        onsetTrie.add("མང");
        onsetTrie.add("རྔ");
        onsetTrie.add("ལྔ");
        onsetTrie.add("སྔ");
        onsetTrie.add("བརྔ");
        onsetTrie.add("བསྔ");
        onsetTrie.add("ཅ");
        onsetTrie.add("གཅ");
        onsetTrie.add("བཅ");
        onsetTrie.add("ལྕ");
        onsetTrie.add("ཆ");
        onsetTrie.add("མཆ");
        onsetTrie.add("འཆ");
        onsetTrie.add("ཇ");
        onsetTrie.add("མཇ");
        onsetTrie.add("འཇ");
        onsetTrie.add("རྗ");
        onsetTrie.add("ལྗ");
        onsetTrie.add("བརྗ");
        onsetTrie.add("ཉ");
        onsetTrie.add("གཉ");
        onsetTrie.add("མཉ");
        onsetTrie.add("རྙ");
        onsetTrie.add("སྙ");
        onsetTrie.add("བརྙ");
        onsetTrie.add("བསྙ");
        onsetTrie.add("ཏ");
        onsetTrie.add("གཏ");
        onsetTrie.add("བཏ");
        onsetTrie.add("རྟ");
        onsetTrie.add("ལྟ");
        onsetTrie.add("སྟ");
        onsetTrie.add("བརྟ");
        onsetTrie.add("བལྟ");
        onsetTrie.add("བསྟ");
        onsetTrie.add("ཐ");
        onsetTrie.add("མཐ");
        onsetTrie.add("འཐ");
        onsetTrie.add("ད");
        onsetTrie.add("དྲ");
        onsetTrie.add("གད");
        onsetTrie.add("བད");
        onsetTrie.add("མད");
        onsetTrie.add("འད");
        onsetTrie.add("འདྲ");
        onsetTrie.add("རྡ");
        onsetTrie.add("ལྡ");
        onsetTrie.add("སྡ");
        onsetTrie.add("བརྡ");
        onsetTrie.add("བལྡ");
        onsetTrie.add("བསྡ");
        onsetTrie.add("ན");
        onsetTrie.add("གན");
        onsetTrie.add("མན");
        onsetTrie.add("རྣ");
        onsetTrie.add("སྣ");
        onsetTrie.add("བརྣ");
        onsetTrie.add("བསྣ");
        onsetTrie.add("པ");
        onsetTrie.add("པྱ");
        onsetTrie.add("པྲ");
        onsetTrie.add("དཔ");
        onsetTrie.add("དཔྱ");
        onsetTrie.add("དཔྲ");
        onsetTrie.add("ལྤ");
        onsetTrie.add("སྤ");
        onsetTrie.add("སྤྱ");
        onsetTrie.add("སྤྲ");
        onsetTrie.add("ཕ");
        onsetTrie.add("ཕྱ");
        onsetTrie.add("ཕྲ");
        onsetTrie.add("འཕ");
        onsetTrie.add("འཕྱ");
        onsetTrie.add("འཕྲ");
        onsetTrie.add("བ");
        onsetTrie.add("བྱ");
        onsetTrie.add("བྲ");
        onsetTrie.add("བླ");
        onsetTrie.add("དབ");
        onsetTrie.add("དབྱ");
        onsetTrie.add("དབྲ");
        onsetTrie.add("འབ");
        onsetTrie.add("འབྱ");
        onsetTrie.add("འབྲ");
        onsetTrie.add("རྦ");
        onsetTrie.add("ལྦ");
        onsetTrie.add("སྦ");
        onsetTrie.add("སྦྱ");
        onsetTrie.add("སྦྲ");
        onsetTrie.add("མ");
        onsetTrie.add("མྱ");
        onsetTrie.add("དམ");
        onsetTrie.add("དམྱ");
        onsetTrie.add("རྨ");
        onsetTrie.add("རྨྱ");
        onsetTrie.add("སྨ");
        onsetTrie.add("སྨྱ");
        onsetTrie.add("ཙ");
        onsetTrie.add("གཙ");
        onsetTrie.add("བཙ");
        onsetTrie.add("རྩ");
        onsetTrie.add("སྩ");
        onsetTrie.add("བརྩ");
        onsetTrie.add("བསྩ");
        onsetTrie.add("ཚ");
        onsetTrie.add("མཚ");
        onsetTrie.add("འཚ");
        onsetTrie.add("ཛ");
        onsetTrie.add("མཛ");
        onsetTrie.add("འཛ");
        onsetTrie.add("རྫ");
        onsetTrie.add("བརྫ");
        onsetTrie.add("ཝ");
        onsetTrie.add("ཞ");
        onsetTrie.add("གཞ");
        onsetTrie.add("བཞ");
        onsetTrie.add("ཟ");
        onsetTrie.add("ཟླ");
        onsetTrie.add("གཟ");
        onsetTrie.add("བཟ");
        onsetTrie.add("བཟླ");
        onsetTrie.add("འ");
        onsetTrie.add("ཡ");
        onsetTrie.add("གཡ");
        onsetTrie.add("ར");
        onsetTrie.add("རླ");
        onsetTrie.add("བརླ");
        onsetTrie.add("ལ");
        onsetTrie.add("ཤ");
        onsetTrie.add("གཤ");
        onsetTrie.add("བཤ");
        onsetTrie.add("ས");
        onsetTrie.add("སྲ");
        onsetTrie.add("སླ");
        onsetTrie.add("གས");
        onsetTrie.add("བས");
        onsetTrie.add("བསྲ");
        onsetTrie.add("བསླ");
        onsetTrie.add("ཧ");
        onsetTrie.add("ཧྲ");
        onsetTrie.add("ལྷ");
        onsetTrie.add("ཨ");
        onsetTrie.add("བགླ");
        onsetTrie.add("མྲ");
        onsetTrie.add("སྨྲ");
        onsetTrie.add("ཏྲ");
        onsetTrie.add("བརྟ");
        onsetTrie.add("ཐྲ");
        onsetTrie.add("སྣྲ");
        onsetTrie.add("ཀྭ");
        onsetTrie.add("བཀྭ");
        onsetTrie.add("ཁྭ");
        onsetTrie.add("གྭ");
        onsetTrie.add("གྲྭ");
        onsetTrie.add("བཅྭ");
        onsetTrie.add("ཉྭ");
        onsetTrie.add("ཏྭ");
        onsetTrie.add("ཐྭ");
        onsetTrie.add("དྭ");
        onsetTrie.add("དྲྭ");
        onsetTrie.add("ཕྱྭ");
        onsetTrie.add("མྭ");
        onsetTrie.add("ཙྭ");
        onsetTrie.add("རྩྭ");
        onsetTrie.add("ཚྭ");
        onsetTrie.add("ཛྭ");
        onsetTrie.add("ཞྭ");
        onsetTrie.add("ཟྭ");
        onsetTrie.add("རྭ");
        onsetTrie.add("ལྭ");
        onsetTrie.add("ལྷྭ");
        onsetTrie.add("ཤྭ");
        onsetTrie.add("སྟྭ");
        onsetTrie.add("སྭ");
        onsetTrie.add("བསྭ");
        onsetTrie.add("ཧྭ");
        vowelCodaTrie.add("");
        vowelCodaTrie.add("འ");
        vowelCodaTrie.add("ག");
        vowelCodaTrie.add("གས");
        vowelCodaTrie.add("ང");
        vowelCodaTrie.add("ངས");
        vowelCodaTrie.add("ད");
        vowelCodaTrie.add("ན");
        vowelCodaTrie.add("བ");
        vowelCodaTrie.add("བས");
        vowelCodaTrie.add("མ");
        vowelCodaTrie.add("མས");
        vowelCodaTrie.add("ལ");
        vowelCodaTrie.add("འི");
        vowelCodaTrie.add("འིའོ");
        vowelCodaTrie.add("འོ");
        vowelCodaTrie.add("འང");
        vowelCodaTrie.add("འམ");
        vowelCodaTrie.add("ར");
        vowelCodaTrie.add("ས");
        vowelCodaTrie.add("ི");
        vowelCodaTrie.add("ིག");
        vowelCodaTrie.add("ིགས");
        vowelCodaTrie.add("ིང");
        vowelCodaTrie.add("ིངས");
        vowelCodaTrie.add("ིད");
        vowelCodaTrie.add("ིན");
        vowelCodaTrie.add("ིབ");
        vowelCodaTrie.add("ིབས");
        vowelCodaTrie.add("ིམ");
        vowelCodaTrie.add("ིམས");
        vowelCodaTrie.add("ིལ");
        vowelCodaTrie.add("ིའི");
        vowelCodaTrie.add("ིའིའོ");
        vowelCodaTrie.add("ིའོ");
        vowelCodaTrie.add("ིའང");
        vowelCodaTrie.add("ིའམ");
        vowelCodaTrie.add("ིར");
        vowelCodaTrie.add("ིས");
        vowelCodaTrie.add("ུ");
        vowelCodaTrie.add("ུག");
        vowelCodaTrie.add("ུགས");
        vowelCodaTrie.add("ུང");
        vowelCodaTrie.add("ུངས");
        vowelCodaTrie.add("ུད");
        vowelCodaTrie.add("ུན");
        vowelCodaTrie.add("ུབ");
        vowelCodaTrie.add("ུབས");
        vowelCodaTrie.add("ུམ");
        vowelCodaTrie.add("ུམས");
        vowelCodaTrie.add("ུལ");
        vowelCodaTrie.add("ུའི");
        vowelCodaTrie.add("ུའིའོ");
        vowelCodaTrie.add("ུའོ");
        vowelCodaTrie.add("ུའང");
        vowelCodaTrie.add("ུའམ");
        vowelCodaTrie.add("ུར");
        vowelCodaTrie.add("ུས");
        vowelCodaTrie.add("ེ");
        vowelCodaTrie.add("ེག");
        vowelCodaTrie.add("ེགས");
        vowelCodaTrie.add("ེང");
        vowelCodaTrie.add("ེངས");
        vowelCodaTrie.add("ེད");
        vowelCodaTrie.add("ེན");
        vowelCodaTrie.add("ེབ");
        vowelCodaTrie.add("ེབས");
        vowelCodaTrie.add("ེམ");
        vowelCodaTrie.add("ེམས");
        vowelCodaTrie.add("ེལ");
        vowelCodaTrie.add("ེའི");
        vowelCodaTrie.add("ེའིའོ");
        vowelCodaTrie.add("ེའོ");
        vowelCodaTrie.add("ེའང");
        vowelCodaTrie.add("ེའམ");
        vowelCodaTrie.add("ེར");
        vowelCodaTrie.add("ེས");
        vowelCodaTrie.add("ོ");
        vowelCodaTrie.add("ོག");
        vowelCodaTrie.add("ོགས");
        vowelCodaTrie.add("ོང");
        vowelCodaTrie.add("ོངས");
        vowelCodaTrie.add("ོད");
        vowelCodaTrie.add("ོན");
        vowelCodaTrie.add("ོབ");
        vowelCodaTrie.add("ོབས");
        vowelCodaTrie.add("ོམ");
        vowelCodaTrie.add("ོམས");
        vowelCodaTrie.add("ོལ");
        vowelCodaTrie.add("ོའི");
        vowelCodaTrie.add("ོའིའོ");
        vowelCodaTrie.add("ོའོ");
        vowelCodaTrie.add("ོའང");
        vowelCodaTrie.add("ོའམ");
        vowelCodaTrie.add("ོར");
        vowelCodaTrie.add("ོས");
        vowelCodaTrie.add("འུ");
        vowelCodaTrie.add("འུའི");
        vowelCodaTrie.add("འུའིའོ");
        vowelCodaTrie.add("འུའོ");
        vowelCodaTrie.add("འུའང");
        vowelCodaTrie.add("འུའམ");
        vowelCodaTrie.add("འུར");
        vowelCodaTrie.add("འུས");
        vowelCodaTrie.add("ིའུ");
        vowelCodaTrie.add("ིའུའི");
        vowelCodaTrie.add("ིའུའིའོ");
        vowelCodaTrie.add("ིའུའོ");
        vowelCodaTrie.add("ིའུའང");
        vowelCodaTrie.add("ིའུའམ");
        vowelCodaTrie.add("ིའུར");
        vowelCodaTrie.add("ིའུས");
        vowelCodaTrie.add("ུའུ");
        vowelCodaTrie.add("ུའུའི");
        vowelCodaTrie.add("ུའུའིའོ");
        vowelCodaTrie.add("ུའུའོ");
        vowelCodaTrie.add("ུའུའང");
        vowelCodaTrie.add("ུའུའམ");
        vowelCodaTrie.add("ུའུར");
        vowelCodaTrie.add("ུའུས");
        vowelCodaTrie.add("ེའུ");
        vowelCodaTrie.add("ེའུའི");
        vowelCodaTrie.add("ེའུའིའོ");
        vowelCodaTrie.add("ེའུའོ");
        vowelCodaTrie.add("ེའུའང");
        vowelCodaTrie.add("ེའུའམ");
        vowelCodaTrie.add("ེའུར");
        vowelCodaTrie.add("ེའུས");
        vowelCodaTrie.add("ོའུ");
        vowelCodaTrie.add("ོའུའི");
        vowelCodaTrie.add("ོའུའིའོ");
        vowelCodaTrie.add("ོའུའོ");
        vowelCodaTrie.add("ོའུའང");
        vowelCodaTrie.add("ོའུའམ");
        vowelCodaTrie.add("ོའུར");
        vowelCodaTrie.add("ོའུས");
    }
    
    public static final boolean isStandardTibetan(final char[] b, final int start, final int end) {
        // returns true if the syllable is formed according to Standard Tibetan rules
        int longestMatchPos = onsetTrie.findLongestMatchPos(b, start, end);
        if (longestMatchPos == -1)
            return false;
        if (longestMatchPos == end)
            return true;
        longestMatchPos = vowelCodaTrie.findLongestMatchPos(b, longestMatchPos, end);
        return longestMatchPos == end;
    }
    
    public static final boolean keepinstack(final char c) {
        return ((c >= '\u0f71' && c <= '\u0f87') || (c >= '\u0f8d' && c <= '\u0fbc') || c == '\u0f39');
    }
    
    public static final int nextStackBreak(final char[] b, final int start, final int end) {
        if (start >= end - 1)
            return end;
        int pos = start + 1;
        while (pos < end) {
            if (!keepinstack(b[pos]))
                break;
            pos += 1;
        }
        return pos;
    }
}